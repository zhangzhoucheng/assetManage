<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE struts PUBLIC
	"-//Apache Software Foundation//DTD Struts Configuration 2.5//EN"
	"http://struts.apache.org/dtds/struts-2.5.dtd">

<struts>

	<!-- 允许动态方法调用 -->
	<!-- <constant name="struts.enable.DynamicMethodInvocation" value="true"></constant> -->

	<!-- struts.i18n.encoding是指定response中返回流的编码方式，明确指出struts.i18n.encoding 参数没有用于HttpServletRequest的setCharacterEncoding()方法 -->
	<constant name="struts.i18n.encoding" value="utf-8"></constant>

	<!-- 在配置struts2中配置常量<constant name="struts.devMode"value="true">有时候会启动开发模式。那么为什么要启动开发模式，开发模式有什么好处？ 
		当struts的配置文件修改后，系统是否自动重新加载该文件，其中默认值为false，在开发阶段最好true 1、启用了开发模式，可以输出日志记录，便于程序设计。 
		2、启动开发模式以后，你在struts.xml配置文件中修改后就不用重新部署项目了。 3、开发模式下设为true，这样可以打印出更详细的错误信息 -->
	<constant name="struts.devMode" value="true" />

	<package name="struts" extends="struts-default" namespace="/"
		strict-method-invocation="false">

		<!-- 拦截器 -->
		<!--《1》将拦截器配置到所有Action中，拦截所有Action中的execute方法。 <default-interceptor-ref 
			name="MyInterceptor"></default-interceptor-ref> -->

		<!-- 《2》此处拦截对应action中方法 -->
		<!-- 拦截器集合 -->
		<interceptors>
			<!--自己定义的拦截器 -->
			<interceptor name="intercepKeyWord" class="com.zz.interceptor.intercepKeyWord"></interceptor>
			<interceptor-stack name="intercepKeyWord_go">
				<interceptor-ref name="defaultStack"></interceptor-ref>
				<interceptor-ref name="intercepKeyWord"></interceptor-ref>
			</interceptor-stack>
		</interceptors>

		<!-- <1>通配符方式实现loginAction中的方法 即通过表单提交action的url，于是来匹配下列配置文件的action的name，（*LoginAction中*表示任意字符串） 
			例如 url="checkLoginAction",则会与之匹配成功，之后查找class类中的mehtod="{1}"所对应的check方法（*即匹配的check） 
			从而 在check方法中写相关的操作 。如下同理。 <2>通过动态方法调用一般用url= -->
		<action name="*LoginAction" class="com.zz.action.LoginAction"
			method="{1}">
			<result name="success">/{1}success.jsp</result>
			<result name="{1}">/{1}.jsp</result>

		</action>

		<!-- 通配符方式实现InOutAction方法 -->
		<action name="*OperateAction" class="com.zz.action.InOutAction"
			method="{1}">
			<result name="success">/{1}success.jsp</result>
			<result name="{1}">/{1}.jsp</result>
			<result name="te1">/allJsp/t1.jsp</result>
		</action>





		<!-- 通配符方式实现RegisterAction方法 -->
		<action name="*RegisterAction" class="com.zz.action.RegisterAction"
			method="{1}">
			<interceptor-ref name="intercepKeyWord_go"></interceptor-ref>
			<result name="success">/{1}success.jsp</result>
			<result name="{1}">/{1}.jsp</result>
			<result name="login">register.jsp</result>
		</action>


         <!-- 通配符方式实现分页测试方法 -->
		<action name="*PageAction" class="com.zz.action.InOutAction"
			method="{1}">
			
		
			<result name="{1}">index1.jsp</result>
		
		</action>
	</package>

</struts>